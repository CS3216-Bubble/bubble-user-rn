import React from 'react';
import {
  Text,
  TextInput,
  Clipboard,
  StyleSheet,
  TouchableWithoutFeedback,
  View,
  Image,
  Platform
} from 'react-native';
import MessageText from './MessageText';
import MessageImage from './MessageImage';
import Time from './Time';

import {generateName, genOnlineProfImgSrc} from '../../../app/utils/ProfileHasher';

export default class Bubble extends React.Component {
  constructor(props) {
    super(props);
    this.onLongPress = this.onLongPress.bind(this);
  }

  handleBubbleToNext() {
    if (this.props.isSameUser(this.props.currentMessage, this.props.nextMessage) && this.props.isSameDay(this.props.currentMessage, this.props.nextMessage) && this.props.nextMessage.type != "REACTION" && this.props.nextMessage.type != "JOIN_ROOM" && this.props.nextMessage.type != "EXIT_ROOM") {
      return StyleSheet.flatten([styles[this.props.position].containerToNext, this.props.containerToNextStyle[this.props.position]]);
    }
    return null;
  }

  handleBubbleToPrevious() {
    if (this.props.isSameUser(this.props.currentMessage, this.props.previousMessage) && this.props.isSameDay(this.props.currentMessage, this.props.previousMessage) && this.props.previousMessage.type != "REACTION"  && this.props.previousMessage.type != "JOIN_ROOM" && this.props.previousMessage.type != "EXIT_ROOM") {
      return StyleSheet.flatten([styles[this.props.position].containerToPrevious, this.props.containerToPreviousStyle[this.props.position]]);
    }
    return null;
  }

  renderName() {
    // // console.log(this.props);
    if (this.props.currentMessage.user.isMe) {
      return null;
    } else if (Platform.OS == 'ios') {
      return <TextInput style={styles.name} note maxLength={30} editable={false} value={this.props.currentMessage.user.name} />;
    } else {
        return <Text style={styles.name}>{this.props.currentMessage.user.name} </Text>;
    }
  }

  renderMessageText() {
    if (this.props.currentMessage.text) {
      const {containerStyle, wrapperStyle, ...messageTextProps} = this.props;
      if (this.props.renderMessageText) {
        return this.props.renderMessageText(messageTextProps);
      }
      return <MessageText {...messageTextProps} />;
    }
    return null;
  }

  renderMessageImage() {
    if (this.props.currentMessage.image) {
      const {containerStyle, wrapperStyle, ...messageImageProps} = this.props;
      if (this.props.renderMessageImage) {
        return this.props.renderMessageImage(messageImageProps);
      }
      return <MessageImage {...messageImageProps} />;
    }
    return null;
  }

  renderTicks() {
    const {currentMessage} = this.props;
    if (this.props.renderTicks) {
      return this.props.renderTicks(currentMessage);
    }
    if (!this.props.currentMessage.user.isMe) {
      return;
    }
    if (currentMessage.type != "REACTION") {
      if (currentMessage.sent || currentMessage.received) {
        return (
          <View style={styles.tickView}>
            {currentMessage.sent && <Text style={[styles.tick, this.props.tickStyle]}>✓</Text>}
            {currentMessage.received && <Text style={[styles.tick, this.props.tickStyle]}>✓</Text>}
          </View>
        );
      } else {
        return (<View style={styles.tickView}>
          {!currentMessage.sent && <Text style={[styles.tick, this.props.tickStyle]}>○</Text>}
        </View>);
      }
    }
    return;
  }

  renderTime() {
    if (this.props.currentMessage.createdAt && this.props.currentMessage.type != "REACTION"  && this.props.currentMessage.type != "JOIN_ROOM" && this.props.currentMessage.type != "EXIT_ROOM") {
      const {containerStyle, wrapperStyle, ...timeProps} = this.props;
      if (this.props.renderTime) {
        return this.props.renderTime(timeProps);
      }
      return <Time {...timeProps} />;
    }
    return null;
  }

  renderCustomView() {
    if (this.props.renderCustomView) {
      return this.props.renderCustomView(this.props);
    }
    return null;
  }

  renderReactionView(senderID, receiverID, variant) {
    var senderName = generateName(senderID);
    var receiverName = generateName(receiverID);
    var senderAvatar = 'http://flathash.com/' + senderID;
    var receiverAvatar = 'http://flathash.com/' + receiverID;

    if (senderID == this.props.user._id) {
      senderName = 'You';
    }

    if (receiverID == this.props.user._id) {
      receiverName = 'you';
    }

    switch (variant) {
      case "THANK":
        return (<View style={{ height: 60, marginTop: 0, marginBottom: 0, alignSelf: 'stretch' }}>
          <View style={{flex: 1, flexDirection: 'row', alignItems: 'center', justifyContent: 'center'}}>
              <Image
              source={{uri: senderAvatar}} style={{height: 20, width: 20, borderRadius: 10, marginLeft: 5, marginRight: 5}} />
              <Text style={{ textAlign: 'center', fontSize: 10, fontWeight: '500', color: 'grey', }} >
                {senderName} thanked {receiverName}!
              </Text>
              <Image
              source={{uri: receiverAvatar}}  style={{height: 20, width: 20, borderRadius: 10, marginLeft: 5, marginRight: 5}} />
            </View>
        </View>);
      case "CHEER":
        return (
          <View style={{ height: 60, marginTop: 0, marginBottom: 0, alignSelf: 'stretch', }}>
            <View style={{flex: 1, flexDirection: 'row', alignItems: 'center', justifyContent: 'center'}}>
              <Image
              source={{uri: senderAvatar}}  style={{height: 20, width: 20, borderRadius: 10, marginLeft: 5, marginRight: 5}}/>
              <Text style={{ textAlign: 'center', fontSize: 10, fontWeight: '500', color: 'grey', }} >
                {senderName} cheered for {receiverName}!
              </Text>
              <Image
              source={{uri: receiverAvatar}}  style={{height: 20, width: 20, borderRadius: 10, marginLeft: 5, marginRight: 5}}/>
            </View>
          </View>
            );
    }
  }

  renderUserJoinLeaveView(senderID, variant) {
    var senderName = generateName(senderID);
    var senderAvatar = 'http://flathash.com/' + senderID;

    if (senderID == this.props.user._id) {
      senderName = 'You';
    }

    switch (variant) {
      case "JOIN_ROOM":
        return (<View style={{ height: 60, marginTop: 0, marginBottom: 0, alignSelf: 'stretch' }}>
          <View style={{flex: 1, flexDirection: 'row', alignItems: 'center', justifyContent: 'center'}}>
              <Image
              source={{uri: senderAvatar}} style={{height: 20, width: 20, borderRadius: 10, marginLeft: 5, marginRight: 5}} />
              <Text style={{ textAlign: 'center', fontSize: 10, fontWeight: '500', color: 'grey', }} >
                {senderName} joined the room!
              </Text>
            </View>
        </View>);
      case "EXIT_ROOM":
        return (<View style={{ height: 60, marginTop: 0, marginBottom: 0, alignSelf: 'stretch' }}>
          <View style={{flex: 1, flexDirection: 'row', alignItems: 'center', justifyContent: 'center'}}>
              <Image
              source={{uri: senderAvatar}} style={{height: 20, width: 20, borderRadius: 10, marginLeft: 5, marginRight: 5}} />
              <Text style={{ textAlign: 'center', fontSize: 10, fontWeight: '500', color: 'grey', }} >
                {senderName} left the room!
              </Text>
            </View>
        </View>);
    }
  }

  onLongPress() {
    if (this.props.onLongPress) {
      this.props.onLongPress(this.context);
    } else {
      if (this.props.currentMessage.text) {
        const options = [
          'Copy Text',
          'Cancel',
        ];
        const cancelButtonIndex = options.length - 1;
        this.context.actionSheet().showActionSheetWithOptions({
          options,
          cancelButtonIndex,
        },
          (buttonIndex) => {
            switch (buttonIndex) {
              case 0:
                Clipboard.setString(this.props.currentMessage.text);
                break;
            }
          });
      }
    }
  }

  render() {

    // console.log(this.props.currentMessage.type);

    // Render Reactions
    if (this.props.currentMessage.type == "REACTION") {
      return (

        <View style={{
          flex: 1,
          alignItems: 'center',
          left: 0,
        }}>
          {this.renderReactionView(this.props.currentMessage.user._id, this.props.currentMessage.target, this.props.currentMessage.text)}
        </View>

      );
    }

    else if (this.props.currentMessage.type == 'JOIN_ROOM' || this.props.currentMessage.type == 'EXIT_ROOM') {
      return (
        <View style={{
          flex: 1,
          alignItems: 'center',
          left: 0,
        }}>
          {this.renderUserJoinLeaveView(this.props.currentMessage.user._id, this.props.currentMessage.type)}
        </View>
      );
    }

    else if (this.props.isSameUser(this.props.currentMessage, this.props.previousMessage) && this.props.isSameDay(this.props.currentMessage, this.props.previousMessage)) {
      return (
        <View style={[styles[this.props.position].container, this.props.containerStyle[this.props.position]]}>
          <View style={[styles[this.props.position].wrapper, this.props.wrapperStyle[this.props.position], this.handleBubbleToNext(), this.handleBubbleToPrevious()]}>
            <TouchableWithoutFeedback
              onLongPress={this.onLongPress}
              accessibilityTraits="text"
              {...this.props.touchableProps}
              >
              <View>
                {this.renderCustomView()}
                {this.renderMessageImage()}
                {this.renderMessageText()}
                <View style={styles.bottom}>
                  {this.renderTime()}
                  {this.renderTicks()}
                </View>
              </View>
            </TouchableWithoutFeedback>
          </View>
        </View>
      );

    } else if (Platform.OS == "android") {

      return (
        <View style={[styles[this.props.position].container, this.props.containerStyle[this.props.position]]}>
         <View>{this.renderName()}</View>
          <View style={[styles[this.props.position].container, this.props.containerStyle[this.props.position]]}>
            <View style={[styles[this.props.position].wrapper, this.props.wrapperStyle[this.props.position], this.handleBubbleToNext(), this.handleBubbleToPrevious()]}>
              <TouchableWithoutFeedback onLongPress={this.onLongPress} accessibilityTraits="text" {...this.props.touchableProps} >
                <View>
                  {this.renderCustomView()}
                  {this.renderMessageImage()}
                  {this.renderMessageText()}
                 {this.props.currentMessage.type != "REACTION"  && this.props.currentMessage.type != "JOIN_ROOM" && this.props.currentMessage.type != "EXIT_ROOM" && <View style={styles.bottom}>
                    {this.renderTime()}
                    {this.renderTicks()}
                  </View>}
                </View>
                </TouchableWithoutFeedback>
            </View>
          </View>
        </View>);

    } else {
      return (
        <View style={[styles[this.props.position].container, this.props.containerStyle[this.props.position]]}>
          { this.renderName() }
          <View style={[styles[this.props.position].container, this.props.containerStyle[this.props.position]]}>
            <View style={[styles[this.props.position].wrapper, this.props.wrapperStyle[this.props.position], this.handleBubbleToNext(), this.handleBubbleToPrevious()]}>
              <TouchableWithoutFeedback onLongPress={this.onLongPress} accessibilityTraits="text" {...this.props.touchableProps} >
                <View>
                  {this.renderCustomView()}
                  {this.renderMessageImage()}
                  {this.renderMessageText()}
                 {this.props.currentMessage.type != "REACTION"  && this.props.currentMessage.type != "JOIN_ROOM" && this.props.currentMessage.type != "EXIT_ROOM" && <View style={styles.bottom}>
                    {this.renderTime()}
                    {this.renderTicks()}
                  </View>}
                </View>
                </TouchableWithoutFeedback>
            </View>
          </View>
        </View>);
    }

  }
}

const styles = {
  left: StyleSheet.create({
    container: {
      flex: 1,
      alignItems: 'flex-start',
    },
    wrapper: {
      borderRadius: 15,
      backgroundColor: '#f0f0f0',
      marginRight: 60,
      minHeight: 20,
      justifyContent: 'flex-end',
    },
    containerToNext: {
      borderBottomLeftRadius: 3,
    },
    containerToPrevious: {
      borderTopLeftRadius: 3,
    },
  }),
  right: StyleSheet.create({
    container: {
      flex: 1,
      alignItems: 'flex-end',
    },
    wrapper: {
      borderRadius: 15,
      backgroundColor: '#0084ff',
      marginLeft: 60,
      minHeight: 20,
      justifyContent: 'flex-end',
    },
    containerToNext: {
      borderBottomRightRadius: 3,
    },
    containerToPrevious: {
      borderTopRightRadius: 3,
    },
  }),
  center: StyleSheet.create({
    container: {
      flexDirection: 'row',
      alignItems: 'flex-end',
      justifyContent: 'flex-end',
      marginLeft: 0,
      marginRight: 0,
    },
  }),
  bottom: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
  },
  name: {
    alignItems: 'flex-start',
    flexWrap: 'wrap',
    paddingTop: 10,
    paddingLeft: 5,
    paddingRight: 10,
    paddingBottom: 10,
    fontSize: 10,
    fontWeight: '500',
    backgroundColor: 'transparent',
    color: 'grey',
  },
  tick: {
    fontSize: 10,
    backgroundColor: 'transparent',
    color: 'white',
  },
  tickView: {
    flexDirection: 'row',
    marginRight: 10,
  }
};

Bubble.contextTypes = {
  actionSheet: React.PropTypes.func,
};

Bubble.defaultProps = {
  touchableProps: {},
  onLongPress: null,
  renderMessageImage: null,
  renderMessageText: null,
  renderCustomView: null,
  renderTime: null,
  isSameUser: () => { },
  isSameDay: () => { },
  position: 'left',
  currentMessage: {
    text: null,
    createdAt: null,
    image: null,
  },
  nextMessage: {},
  previousMessage: {},
  containerStyle: {},
  wrapperStyle: {},
  tickStyle: {},
  containerToNextStyle: {},
  containerToPreviousStyle: {},
};

Bubble.propTypes = {
  touchableProps: React.PropTypes.object,
  onLongPress: React.PropTypes.func,
  renderMessageImage: React.PropTypes.func,
  renderMessageText: React.PropTypes.func,
  renderCustomView: React.PropTypes.func,
  renderTime: React.PropTypes.func,
  isSameUser: React.PropTypes.func,
  isSameDay: React.PropTypes.func,
  position: React.PropTypes.oneOf(['left', 'right', 'center']),
  currentMessage: React.PropTypes.object,
  nextMessage: React.PropTypes.object,
  previousMessage: React.PropTypes.object,
  containerStyle: React.PropTypes.shape({
    left: View.propTypes.style,
    right: View.propTypes.style,
  }),
  wrapperStyle: React.PropTypes.shape({
    left: View.propTypes.style,
    right: View.propTypes.style,
  }),
  tickStyle: Text.propTypes.style,
  containerToNextStyle: React.PropTypes.shape({
    left: View.propTypes.style,
    right: View.propTypes.style,
  }),
  containerToPreviousStyle: React.PropTypes.shape({
    left: View.propTypes.style,
    right: View.propTypes.style,
  }),
};
